service: '${env:SERVICE_NAME_PREFIX, "inbox-api-local"}'
frameworkVersion: '3'

useDotenv: true

custom:
  secretsPrefix: '/${env:SERVICE_NAME_PREFIX, "local"}'
  stage: '${opt:stage, "local"}'
  stackName: '${self:service}'
  lambdaAccountId: ${env:COMMUNICATION_ACCOUNT_ID, ssm:${self:custom.secretsPrefix}/COMMUNICATION_ACCOUNT_ID}
  lambdaRegion: ${self:provider.region}
  lambdaFunctionName: addMessage
  # commLambdaPrefix: "arn:aws:lambda:${self:provider.region}:${self:custom.commAccountId}:function:ssm:${self:custom.secretsPrefix}-${opt:stage}"
  customDomain:
    domainName: ${env:API_GATEWAY_CUSTOM_DOMAIN, ssm:${self:custom.secretsPrefix}/API_GATEWAY_CUSTOM_DOMAIN}
    stage: ${opt:stage, "local"}
    basePath: ${env:API_GATEWAY_SUFFIX, ssm:${self:custom.secretsPrefix}/API_GATEWAY_SUFFIX, "inbox-api"}
    createRoute53Record: false
    createRoute53IPv6Record: false
    apiType: rest
    autoDomain: false
    endpointType: edge

provider:
  name: aws
  region: ${env:AWS_REGION, "us-east-1"}
  runtime: nodejs20.x

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-offline
  - serverless-esbuild

functions:
  healthCheck:
    handler: ../src/handlers/healthCheck.handler
  # addMessage:
  #     handler: ../src/handlers/test.handler
  #     events:
  #       - http:
  #           path: v1/conversations/{conversationId}/messages
  #           method: post
  # integration: aws
  # request:
  #   uri: !Sub arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:custom.lambdaRegion}:${self:custom.lambdaAccountId}:function:${self:custom.lambdaFunctionName}/invocations
  #   parameters:
  #     paths:
  #       conversationId: true

resources:
  Resources:
    # API Gateway Rest API
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-api
        Description: API Gateway for cross-account Lambda integration

    # Resource for /v1
    ApiGatewayResourceV1:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: v1

    # Resource for /v1/conversations
    ApiGatewayResourceConversations:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !Ref ApiGatewayResourceV1
        PathPart: conversations

    # Resource for /v1/conversations/{conversationId}
    ApiGatewayResourceConversationId:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !Ref ApiGatewayResourceConversations
        PathPart: '{conversationId}'

    # Resource for /v1/conversations/{conversationId}/messages
    ApiGatewayResourceMessages:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !Ref ApiGatewayResourceConversationId
        PathPart: messages

    # POST method for /v1/conversations/{conversationId}/messages
    ApiGatewayMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !Ref ApiGatewayResourceMessages
        HttpMethod: POST
        AuthorizationType: NONE
        RequestParameters:
          method.request.path.conversationId: true
        Integration:
          Type: AWS
          IntegrationHttpMethod: POST
          Uri: !Sub arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:custom.lambdaRegion}:${self:custom.lambdaAccountId}:function:${self:custom.lambdaFunctionName}/invocations
          Credentials: !GetAtt ApiGatewayRole.Arn
          RequestTemplates:
            application/json: |
              {
                "conversationId": "$input.params('conversationId')",
                "body": $input.json('$')
              }
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"

    # IAM Role for API Gateway to invoke Lambda
    ApiGatewayRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvokePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: lambda:InvokeFunction
                  Resource: !Sub arn:aws:lambda:${self:custom.lambdaRegion}:${self:custom.lambdaAccountId}:function:${self:custom.lambdaFunctionName}

    # API Gateway Deployment
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn: ApiGatewayMethod
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        StageName: ${self:custom.stage}

  Outputs:
    ApiUrl:
      Description: URL of the API
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
