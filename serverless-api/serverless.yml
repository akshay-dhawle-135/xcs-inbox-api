service: '${env:SERVICE_NAME_PREFIX, "inbox-api-local"}'
frameworkVersion: '3'

useDotenv: true

custom:
  secretsPrefix: '/${env:SERVICE_NAME_PREFIX, "local"}'
  stage: '${opt:stage, "local"}'
  stackName: '${self:service}'
  commAccountId: ${env:COMMUNICATION_ACCOUNT_ID, ssm:${self:custom.secretsPrefix}/COMMUNICATION_ACCOUNT_ID}
  # commLambdaPrefix: "arn:aws:lambda:${self:provider.region}:${self:custom.commAccountId}:function:ssm:${self:custom.secretsPrefix}-${opt:stage}"
  customDomain:
    domainName: ${env:API_GATEWAY_CUSTOM_DOMAIN, ssm:${self:custom.secretsPrefix}/API_GATEWAY_CUSTOM_DOMAIN}
    stage: ${opt:stage, "local"}
    basePath: ${env:API_GATEWAY_SUFFIX, ssm:${self:custom.secretsPrefix}/API_GATEWAY_SUFFIX, "inbox-api"}
    createRoute53Record: false
    createRoute53IPv6Record: false
    apiType: rest
    autoDomain: false
    endpointType: edge

provider:
  name: aws
  region: ${env:AWS_REGION, "us-east-1"}
  runtime: nodejs20.x

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-offline
  - serverless-esbuild

package:
  exclude:
    - '**/*'


functions:
  addMessage:
    events:
      - http:
          method: post
          path: v1/conversations/{conversationId}/messages
          integration: lambda
          request:
            uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions:${self:custom.secretsPrefix}-${opt:stage}-addMessage/invocations

  addConversation:
    events:
      - http:
          method: post
          path: v1/conversations
          integration: lambda
          request:
            uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions:${self:custom.secretsPrefix}-${opt:stage}-addConversation/invocations
